@inject IJSRuntime JSRuntime
@using Allegiance.Blazor.NoUiSlider.Models
@using System.Globalization 
@typeparam TValue

<div id="@configuration.Id.ToString()" class="@Class"></div>

@code {
    private NoUiSliderConfiguration<TValue> configuration;
    private TValue startValue { get; set; }

    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public string SliderHeader { get; set; }
    [Parameter]
    public EventCallback<TValue> StartValueChanged { get; set; }

    [Parameter]
    public NoUiSliderConfiguration<TValue> Configuration
    {
        get
        {
            return configuration;
        }
        set
        {
            if (configuration != null)
            {
                configuration = value;
                JSRuntime.InvokeVoidAsync("updateSlider", configuration);
                configuration.SetSlider = false;
            }
            else
            {
                configuration = value;
            }
        }
    }
    [Parameter]
    public TValue StartValue
    {
        get
        {
            return startValue;
        }
        set
        {
            if (Convert.ToDouble(startValue) != Convert.ToDouble(value))
            {
                startValue = value;
                configuration.Start = value;
                configuration.SetSlider = true;

                //Temp variables for setting step to percentage of max range
                var OldRangeMax = (int)Convert.ChangeType(configuration.Range.Max, typeof(int));

                //If Growth is true, slider will increase when reaching max value
                if (configuration.Growth)
                {
                    //Increase the max range when the slider hits the end of the slider base
                    if (Convert.ToDouble(configuration.Start) == Convert.ToDouble(configuration.Range.Max))
                    {
                        if (typeof(TValue) == typeof(double))
                        {
                            var Sum = Convert.ToDouble(configuration.Range.Max) * 10;
                            configuration.Range.Max = (TValue)Convert.ChangeType(Sum, typeof(TValue));
                        }
                    }
                    if (Convert.ToDouble(value) > Convert.ToDouble(configuration.Range.Max))
                    {
                        if (typeof(TValue) == typeof(double))
                        {
                            while (Convert.ToDouble(configuration.Start) > Convert.ToDouble(configuration.Range.Max))
                            {
                                var Sum = Convert.ToDouble(configuration.Range.Max) * 10;
                                configuration.Range.Max = (TValue)Convert.ChangeType(Sum, typeof(TValue));
                            }
                        }
                    }
                    //Decrease max range when slider hits range minimum
                    if (Convert.ToDouble(configuration.Start) == 0 && Convert.ToDouble(configuration.Range.Max) > 100)
                    {
                        var RangeTemp = Convert.ToDouble(configuration.Range.Max) / 10;
                        configuration.Range.Max = (TValue)Convert.ChangeType(RangeTemp, typeof(TValue));
                        var StartTemp = Convert.ToDouble(configuration.Range.Max) * 0.4;
                        configuration.Start = (TValue)Convert.ChangeType(StartTemp, typeof(TValue));

                    }
                }

                if (configuration.PercentageStep != null)
                {
                    var Percentage = Convert.ToDouble(configuration.Range.Max) / 100 * Convert.ToDouble(configuration.PercentageStep);
                    configuration.Step = (TValue)Convert.ChangeType(Percentage, typeof(TValue));
                    //Setting the step to a percentage of max value
                    if (OldRangeMax != Convert.ToDouble(configuration.Range.Max))
                    {
                        Percentage = Convert.ToDouble(configuration.Range.Max) / 100 * Convert.ToDouble(configuration.PercentageStep);
                        configuration.Step = (TValue)Convert.ChangeType(Percentage, typeof(TValue));
                        OldRangeMax = (int)Convert.ChangeType(configuration.Range.Max, typeof(int));
                    }
                }
                //InputFormat will change the number type of your tooltip
                if (configuration.InputFormat == "currency")
                {
                    configuration.TooltipsFormat = new TooltipsFormat
                    {
                        Prefix = Convert.ToString(CultureInfo.CurrentCulture.NumberFormat.CurrencySymbol),
                        Thousand = " ",
                        Decimals = 0,
                        Suffix = ""
                    };
                }
                else if (configuration.InputFormat == "percentage")
                {
                    configuration.TooltipsFormat = new TooltipsFormat
                    {
                        Prefix = "",
                        Suffix = "%",
                        Decimals = 0
                    };
                }
                JSRuntime.InvokeVoidAsync("updateSlider", configuration);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            configuration.Start = startValue;
            var objectReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("renderSlider", configuration, objectReference);
        }
    }

    [JSInvokable("sliderValueChanged")]
    public void SliderValueChanged(TValue newValue)
    {
        if (StartValueChanged.HasDelegate)
        {
            StartValueChanged.InvokeAsync(newValue);
        }
    }
}
