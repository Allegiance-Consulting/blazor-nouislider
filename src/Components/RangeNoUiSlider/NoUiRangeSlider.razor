@inject IJSRuntime JSRuntime
@using Allegiance.Blazor.NoUiSlider.Models
@typeparam TValue

<div>
    @*<div style="text-align: right">@firstSec years</div>*@
    <div id="@configuration.Id.ToString()" class="@Class"></div>
</div>
<br />

@code {
    private RangeSliderConfiguration<TValue> configuration;
    private TValue startValue { get; set; }
    private TValue endValue { get; set; }
    private TValue firstSec { get; set; }
    private TValue startFirst { get; set; }

    [Parameter]
    public EventCallback<TValue> StartValueChanged { get; set; }
    [Parameter]
    public EventCallback<TValue> EndValueChanged { get; set; }
    [Parameter]
    public EventCallback<TValue> StartFirstChanged { get; set; }
    [Parameter]
    public EventCallback<TValue> FirstSecChanged { get; set; }
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public string SliderHeader { get; set; }

    [Parameter]
    public RangeSliderConfiguration<TValue> Configuration
    {
        get
        {
            return configuration;
        }
        set
        {
            if (configuration != null)
            {
                configuration = value;
                JSRuntime.InvokeVoidAsync("updateSlider", configuration);
                configuration.SetSlider = false;
            }
            else
            {
                configuration = value;
            }
        }
    }

    [Parameter]
    public TValue StartValue
    {
        get
        {
            return startValue;
        }
        set
        {
            startValue = value;
            configuration.SetSlider = true;
            configuration.Start[0] = value;

            JSRuntime.InvokeVoidAsync("updateSlider", configuration);
        }
    }

    [Parameter]
    public TValue EndValue
    {
        get
        {
            return endValue;
        }
        set
        {
            endValue = value;
            configuration.SetSlider = true;
            configuration.Start[1] = value;

            var OldRangeMax = Convert.ToDouble(configuration.Range.Max);

            if (configuration.Growth)
            {
                if (Convert.ToDouble(endValue) == Convert.ToDouble(configuration.Range.Max))
                {
                    if (typeof(TValue) == typeof(double))
                    {
                        var Max = Convert.ToDouble(configuration.Range.Max);
                        var Sum = Max * 10;
                        configuration.Range.Max = (TValue)Convert.ChangeType(Sum, typeof(TValue));
                    }
                }
                if (Convert.ToDouble(endValue) > Convert.ToDouble(configuration.Range.Max))
                {
                    if (typeof(TValue) == typeof(double))
                    {
                        while (Convert.ToDouble(endValue) > Convert.ToDouble(configuration.Range.Max))
                        {
                            var Max = Convert.ToDouble(configuration.Range.Max);
                            var Sum = Max * 10;
                            configuration.Range.Max = (TValue)Convert.ChangeType(Sum, typeof(TValue));
                        }
                    }
                }
            }
            if (configuration.PercentageStep != null)
            {
                var Percentage = Convert.ToDouble(configuration.Range.Max) / 100 * Convert.ToDouble(configuration.PercentageStep);
                configuration.Step = (TValue)Convert.ChangeType(Percentage, typeof(TValue));
                //Setting the step to a percentage of max value
                if (OldRangeMax != Convert.ToDouble(configuration.Range.Max))
                {
                    Percentage = Convert.ToDouble(configuration.Range.Max) / 100 * Convert.ToDouble(configuration.PercentageStep);
                    configuration.Step = (TValue)Convert.ChangeType(Percentage, typeof(TValue));
                    OldRangeMax = (int)Convert.ChangeType(configuration.Range.Max, typeof(int));
                }
            }
            JSRuntime.InvokeVoidAsync("updateSlider", configuration);
        }
    }

    [Parameter]
    public TValue StartFirst
    {
        get
        {
            var StartFirstCalc = Convert.ToDouble(startValue) - Convert.ToDouble(configuration.Range.Min);
            startFirst = (TValue)Convert.ChangeType(StartFirstCalc, typeof(TValue));
            return startFirst;
        }
        set
        {
            startFirst = value;
        }
    }
    [Parameter]
    public TValue FirstSec
    {
        get
        {
            var Total = Convert.ToDouble(endValue) - Convert.ToDouble(startValue);
            firstSec = (TValue)Convert.ChangeType(Total, typeof(TValue));
            return firstSec;
        }
        set
        {
            firstSec = value;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            configuration.Start = new TValue[] {startValue, endValue };
            var objectReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("renderSlider", configuration, objectReference);
        }
    }

    [JSInvokable("sliderValueChanged")]
    public void SliderValueChanged(TValue newStartValue, TValue newEndValue)
    {
        if (StartValueChanged.HasDelegate || EndValueChanged.HasDelegate)
        {
            StartValueChanged.InvokeAsync(newStartValue);
            EndValueChanged.InvokeAsync(newEndValue);
        }
    }
}
