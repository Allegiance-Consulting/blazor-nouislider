@inject IJSRuntime JSRuntime
@using Allegiance.Blazor.NoUiSlider.Models
@typeparam TValue

<div>
    <div>Value from start to first handle: @startFirst</div>
    <div id="@configuration.Id.ToString()"></div>
    <div>Value between start and end handle: @startEnd</div>
</div>
<br />

@code {
    private RangeSliderConfiguration<TValue> configuration;
    private TValue startValue { get; set; }
    private TValue endValue { get; set; }
    private TValue startEnd { get; set; }
    private TValue startFirst { get; set; }

    [Parameter]
    public EventCallback<TValue> StartValueChanged { get; set; }
    [Parameter]
    public EventCallback<TValue> EndValueChanged { get; set; }

    [Parameter]
    public RangeSliderConfiguration<TValue> Configuration
    {
        get
        {
            return configuration;
        }
        set
        {
            if (configuration != null)
            {
                configuration = value;
                JSRuntime.InvokeVoidAsync("updateSlider", configuration);
                configuration.SetSlider = false;
            }
            else
            {
                configuration = value;
            }
        }
    }

    [Parameter]
    public TValue StartValue
    {
        get
        {
            return startValue;
        }
        set
        {
            startValue = value;
            configuration.SetSlider = true;
            configuration.Start[0] = value;
            startEnd = value;
            var Total = Convert.ToDouble(endValue) - Convert.ToDouble(startValue);
            startEnd = (TValue)Convert.ChangeType(Total, typeof(TValue));
            var StartFirst = Convert.ToDouble(startValue) - Convert.ToDouble(configuration.Range.Min);
            startFirst = (TValue)Convert.ChangeType(StartFirst, typeof(TValue));
            JSRuntime.InvokeVoidAsync("updateSlider", configuration);
        }
    }

    [Parameter]
    public TValue EndValue
    {
        get
        {
            return endValue;
        }
        set
        {
            endValue = value;
            configuration.SetSlider = true;
            configuration.Start[1] = value;
            if (Convert.ToDouble(configuration.Start[1]) == Convert.ToDouble(configuration.Range.Max))
            {
                if (typeof(TValue) == typeof(double))
                {
                    var Max = Convert.ToDouble(configuration.Range.Max);
                    var Sum = Max * 10;
                    configuration.Range.Max = (TValue)Convert.ChangeType(Sum, typeof(TValue));
                }
            }
            if (Convert.ToDouble(configuration.Start[1]) > Convert.ToDouble(configuration.Range.Max))
            {
                if (typeof(TValue) == typeof(double))
                {
                    while (Convert.ToDouble(configuration.Start[1]) > Convert.ToDouble(configuration.Range.Max))
                    {
                        var Max = Convert.ToDouble(configuration.Range.Max);
                        var Sum = Max * 10;
                        configuration.Range.Max = (TValue)Convert.ChangeType(Sum, typeof(TValue));
                    }
                }
            }
            startEnd = value;
            var Total = Convert.ToDouble(endValue) - Convert.ToDouble(startValue);
            startEnd = (TValue)Convert.ChangeType(Total, typeof(TValue));
            JSRuntime.InvokeVoidAsync("updateSlider", configuration);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            configuration.Start = new TValue[] {startValue, endValue };
            var objectReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("renderSlider", configuration, objectReference);
        }
    }

    [JSInvokable("sliderValueChanged")]
    public void SliderValueChanged(TValue startValue, TValue endValue)
    {
        if (StartValueChanged.HasDelegate || EndValueChanged.HasDelegate)
        {
            StartValueChanged.InvokeAsync(startValue);
            EndValueChanged.InvokeAsync(endValue);
        }
    }
}
